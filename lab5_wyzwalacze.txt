CREATE TABLE archiwum_departamentow (
department_id NUMBER(4), 
department_name VARCHAR(30), 
manager_id NUMBER(6), 
location_id NUMBER(4)
);

CREATE OR REPLACE TRIGGER LAB5TRIGGER1 
AFTER DELETE ON departments
FOR EACH ROW
BEGIN
INSERT INTO archiwum_departamentow (department_id, department_name, manager_id, location_id)
VALUES (:old.department_id, :old.department_name, :old.manager_id, :old.location_id);
END;

DELETE FROM departments WHERE department_id = 170;

SELECT * FROM archiwum_departamentow;

CREATE TABLE zlodziej (
employee_id NUMBER(6), 
username VARCHAR(500), 
czas_zmiany DATE
);

CREATE OR REPLACE TRIGGER LAB5TRIGGER2 
BEFORE INSERT OR UPDATE ON employees
FOR EACH ROW
BEGIN
IF :new.salary < 2000 OR :new.salary > 26000 THEN
INSERT INTO zlodziej (employee_id, username, czas_zmiany) VALUES (:new.employee_id, USER, CURRENT_TIMESTAMP);
RAISE_APPLICATION_ERROR(-20000, 'Nie można dodawać lub zmieniać wynagrodzenia poza widełkami 2000-26000');
END IF;
END;

W przypadku zabronienia dodania nowego wiersza do employees nie doda się nowy wiersz w zlodziej.

UPDATE employees SET salary = 1400 WHERE employee_id = 101;

SELECT * FROM zlodziej;

CREATE SEQUENCE employees_seq
START WITH 1
INCREMENT BY 1;

CREATE OR REPLACE TRIGGER LAB5TRIGGER3 
BEFORE INSERT ON employees
FOR EACH ROW
BEGIN
SELECT employees_seq.NEXTVAL
INTO :new.employee_id
FROM dual;
END;

INSERT INTO employees (first_name, last_name, salary, email, hire_date, job_id)
VALUES ('John', 'Doe', 3000, 'sldalsd', CURRENT_TIMESTAMP, 'AD_VP');
INSERT INTO employees (first_name, last_name, salary, email, hire_date, job_id)
VALUES ('Johna', 'Doa', 4000, 'sldalsd', CURRENT_TIMESTAMP, 'AD_VP');
SELECT * FROM employees;

CREATE OR REPLACE TRIGGER LAB5TRIGGER4 
BEFORE INSERT OR UPDATE OR DELETE ON job_grades
FOR EACH ROW
BEGIN
RAISE_APPLICATION_ERROR(-20001, 'Niedozwolona operacja na tabeli JOB_GRADES');
END;

INSERT INTO job_grades VALUES ('A', 2, 3);

CREATE OR REPLACE TRIGGER LAB5TRIGGER5 
BEFORE UPDATE ON jobs
FOR EACH ROW
BEGIN
:new.min_salary := :old.min_salary;
:new.max_salary := :old.max_salary;
END;

UPDATE jobs SET min_salary = 500, max_salary = 200 WHERE job_id = 'AD_VP';

SELECT * FROM jobs WHERE job_id = 'AD_VP';